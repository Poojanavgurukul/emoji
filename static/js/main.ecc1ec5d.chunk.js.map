{"version":3,"sources":["Components/Emojisearch.js","App.js","serviceWorker.js","index.js","Components/logo.jpg"],"names":["Searchbar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchange","e","setState","search","target","value","state","filtermethod","data","filter","movie","title","toLowerCase","indexOf","keywords","toLocaleLowerCase","react_default","a","createElement","className","src","logo","alt","onChange","placeholder","style","marginTop","icon","type","slice","map","index","key","fontSize","symbol","React","Component","App","Emojisearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"gOA2DeA,cArDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFI,aAAe,SAAAC,GACbR,EAAKS,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,SANjCZ,EAAKa,MAAQ,CACXH,OAAQ,IAHEV,wEAUL,IACCU,EAAWP,KAAKU,MAAhBH,OACFI,EAAeC,EAAKC,OAAO,SAAAC,GAC/B,OAC+D,IAA7DA,EAAMC,MAAMC,cAAcC,QAAQV,EAAOS,iBAC6B,IAAtEF,EAAMI,SAASF,cAAcC,QAAQV,EAAOY,uBAGhD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMC,IAAI,KAAKH,UAAU,SACnCH,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,SACEb,MAAOT,KAAKU,MAAMH,OAClBoB,SAAU3B,KAAKI,aACfwB,YAAY,mBACZL,UAAU,MACVM,MAAO,CAAEC,UAAW,WAEtBV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,KAAK,YAEbZ,EAAAC,EAAAC,cAAA,UACGX,EAAasB,MAAM,EAAG,IAAIC,IAAI,SAASpB,EAAOqB,GAC7C,OACEf,EAAAC,EAAAC,cAAA,OAAKc,IAAKD,EAAOZ,UAAU,cACzBH,EAAAC,EAAAC,cAAA,QAAMO,MAAO,CAAEQ,SAAU,QAAUd,UAAU,WAC1CT,EAAMwB,QAETlB,EAAAC,EAAAC,cAAA,QAAMO,MAAO,CAAEQ,SAAU,QAAUd,UAAU,WAC1CT,EAAMC,UAIX,aA/CUwB,IAAMC,WCSfC,2LARX,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACoB,EAAD,cAJYF,cCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,sz2JE3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.ecc1ec5d.chunk.js","sourcesContent":["import React from \"react\";\nimport data from \"../Components/EmojiList.json\";\nimport logo from \"../Components/logo.jpg\";\nimport { Icon } from \"antd\";\n\nclass Searchbar extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      search: \"\"\n    };\n  }\n\n  onSearchange = e => {\n    this.setState({ search: e.target.value });\n  };\n  render() {\n    const { search } = this.state;\n    const filtermethod = data.filter(movie => {\n      return (\n        movie.title.toLowerCase().indexOf(search.toLowerCase()) !== -1 ||\n        movie.keywords.toLowerCase().indexOf(search.toLocaleLowerCase()) !== -1\n      );\n    });\n    return (\n      <div className=\"main\">\n        <div className=\"nav\">\n          <img src={logo} alt=\"im\" className=\"logo\" />\n          <h1>Emoji Search</h1>\n        </div>\n        <div className=\"inpbox\">\n          <input\n            value={this.state.search}\n            onChange={this.onSearchange}\n            placeholder=\"Type here.......\"\n            className=\"inp\"\n            style={{ marginTop: \"100px\" }}\n          />\n          <Icon type=\"search\" />\n        </div>\n        <ul>\n          {filtermethod.slice(0, 20).map(function(movie, index) {\n            return (\n              <div key={index} className=\"inpcontent\">\n                <span style={{ fontSize: \"30px\" }} className=\"content\">\n                  {movie.symbol}\n                </span>\n                <span style={{ fontSize: \"20px\" }} className=\"content\">\n                  {movie.title}\n                </span>\n              </div>\n            );\n          })}{\" \"}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Searchbar;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Searchbar from './Components/Emojisearch'\nimport 'antd/dist/antd.css'; \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Searchbar  />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.13a0cf08.jpg\";"],"sourceRoot":""}